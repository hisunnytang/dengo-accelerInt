Import('env')
cObj = []
c_src = Glob('*.c')

name_mod = env['CPPDEFINES'][0].lower()
for src in c_src:
	name = str(src)
	stub = name[:name.index('.c')]
	targ = stub + '_' + name_mod + '.o'
	cObj.append(env.Object(target=targ, source=src, variant_dir=env['variant']))

cudaObj = []
cuda_src = Glob('*.cu')
if env['build_cuda']:
	for src in cuda_src:
		name = str(src)
		stub = name[:name.index('.cu')]
		targ = stub + '_' + name_mod + '.cu.o'
		cudaObj.append(env.CUDAObject(src, target=targ, variant_dir=env['variant']))

	def add_c_obj(src, cudaObj, env):
		obj = 'cu_' + src.replace('.c', '_{}.o'.format(name_mod))
		cudaObj.append(env.Object(
						target=obj,
						source=src,
						variant_dir=env['variant']))
	c_env = env.Clone()
	if not 'CPPDEFINES' in c_env:
		c_env['CPPDEFINES'] = []
	c_env['CPPDEFINES'] += ['CUDA']
	add_c_obj('cf.c', cudaObj, c_env)
	add_c_obj('linear-algebra.c', cudaObj, c_env)

Return ('cObj', 'cudaObj')